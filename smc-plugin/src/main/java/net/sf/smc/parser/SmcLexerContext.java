/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SmcLexer.sm
 */


/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is State Machine Compiler (SMC).
 * 
 * The Initial Developer of the Original Code is Charles W. Rapp.
 * Portions created by Charles W. Rapp are
 * Copyright (C) 2000 - 2006, 2008. Charles W. Rapp.
 * All Rights Reserved.
 * 
 * Contributor(s):
 *   Eitan Suez contributed examples/Ant.
 *   (Name withheld) contributed the C# code generation and
 *   examples/C#.
 *   Francois Perrad contributed the Python code generation and
 *   examples/Python.
 *   Chris Liscio contributed the Objective-C code generation
 *   and examples/ObjC.
 *
 * smcLexer --
 *
 *  This statemap finds tokens in a statemap source file.
 *
 * RCS ID
 * $Id: SmcLexer.sm,v 1.4 2011/11/20 14:58:33 cwrapp Exp $
 *
 * CHANGE LOG
 * $Log: SmcLexer.sm,v $
 * Revision 1.4  2011/11/20 14:58:33  cwrapp
 * Check in for SMC v. 6.1.0
 *
 * Revision 1.3  2009/04/11 13:11:12  cwrapp
 * Corrected raw mode 3 to handle multiple argument template/generic declarations.
 *
 * Revision 1.2  2009/03/27 09:41:47  cwrapp
 * Added F. Perrad changes back in.
 *
 * Revision 1.1  2009/03/01 18:20:42  cwrapp
 * Preliminary v. 6.0.0 commit.
 *
 * Revision 1.10  2008/08/16 14:31:37  fperrad
 * + detabify
 *
 * Revision 1.9  2007/12/28 12:34:41  cwrapp
 * Version 5.0.1 check-in.
 *
 * Revision 1.8  2007/01/15 00:23:51  cwrapp
 * Release 4.4.0 initial commit.
 *
 * Revision 1.7  2006/09/16 15:04:29  cwrapp
 * Initial v. 4.3.3 check-in.
 *
 * Revision 1.6  2005/07/07 12:10:41  fperrad
 * Add a new token '$' for Perl language.
 *
 * Revision 1.5  2005/05/28 19:28:42  cwrapp
 * Moved to visitor pattern.
 *
 * Revision 1.5  2005/02/21 18:14:01  charlesr
 * Removed unknown FSM transition, using unicode transition
 * instead.
 *
 * Revision 1.4  2005/02/21 15:36:08  charlesr
 * Added Francois Perrad to Contributors section for Python work.
 *
 * Revision 1.3  2004/10/30 16:05:34  charlesr
 * Added unicode support.
 *
 * Revision 1.2  2004/09/06 16:40:22  charlesr
 * Added C# support.
 *
 * Revision 1.1  2004/01/29 02:14:49  charlesr
 * Add Default state containing single transition which
 * handles an unexpected asterisk.
 *
 * Revision 1.0  2003/12/14 21:04:00  charlesr
 * Initial revision
 *
 */


package net.sf.smc.parser;

import org.slf4j.*;

public class SmcLexerContext
    extends statemap.FSMContext
    implements java.io.Serializable
{
private final static Logger log = LoggerFactory.getLogger(SmcLexerContext.class);
//---------------------------------------------------------------
// Member methods.
//

    public Logger getLog() {return log;}

    public SmcLexerContext(SmcLexer owner)
    {
        super (TokenMap.Start);

        _owner = owner;
    }

    public SmcLexerContext(SmcLexer owner, SmcLexerState initState)
    {
        super (initState);

        _owner = owner;
    }

    public synchronized void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public synchronized void EOL()
    {
        _transition = "EOL";
        getState().EOL(this);
        _transition = "";
        return;
    }

    public synchronized void alpha()
    {
        _transition = "alpha";
        getState().alpha(this);
        _transition = "";
        return;
    }

    public synchronized void asterisk()
    {
        _transition = "asterisk";
        getState().asterisk(this);
        _transition = "";
        return;
    }

    public synchronized void colon()
    {
        _transition = "colon";
        getState().colon(this);
        _transition = "";
        return;
    }

    public synchronized void comma()
    {
        _transition = "comma";
        getState().comma(this);
        _transition = "";
        return;
    }

    public synchronized void commentDone()
    {
        _transition = "commentDone";
        getState().commentDone(this);
        _transition = "";
        return;
    }

    public synchronized void digit()
    {
        _transition = "digit";
        getState().digit(this);
        _transition = "";
        return;
    }

    public synchronized void dollar()
    {
        _transition = "dollar";
        getState().dollar(this);
        _transition = "";
        return;
    }

    public synchronized void equal()
    {
        _transition = "equal";
        getState().equal(this);
        _transition = "";
        return;
    }

    public synchronized void gt()
    {
        _transition = "gt";
        getState().gt(this);
        _transition = "";
        return;
    }

    public synchronized void left_brace()
    {
        _transition = "left_brace";
        getState().left_brace(this);
        _transition = "";
        return;
    }

    public synchronized void left_bracket()
    {
        _transition = "left_bracket";
        getState().left_bracket(this);
        _transition = "";
        return;
    }

    public synchronized void left_paren()
    {
        _transition = "left_paren";
        getState().left_paren(this);
        _transition = "";
        return;
    }

    public synchronized void lt()
    {
        _transition = "lt";
        getState().lt(this);
        _transition = "";
        return;
    }

    public synchronized void percent()
    {
        _transition = "percent";
        getState().percent(this);
        _transition = "";
        return;
    }

    public synchronized void period()
    {
        _transition = "period";
        getState().period(this);
        _transition = "";
        return;
    }

    public synchronized void right_brace()
    {
        _transition = "right_brace";
        getState().right_brace(this);
        _transition = "";
        return;
    }

    public synchronized void right_paren()
    {
        _transition = "right_paren";
        getState().right_paren(this);
        _transition = "";
        return;
    }

    public synchronized void semicolon()
    {
        _transition = "semicolon";
        getState().semicolon(this);
        _transition = "";
        return;
    }

    public synchronized void slash()
    {
        _transition = "slash";
        getState().slash(this);
        _transition = "";
        return;
    }

    public synchronized void sourceDone()
    {
        _transition = "sourceDone";
        getState().sourceDone(this);
        _transition = "";
        return;
    }

    public synchronized void underscore()
    {
        _transition = "underscore";
        getState().underscore(this);
        _transition = "";
        return;
    }

    public synchronized void unicode()
    {
        _transition = "unicode";
        getState().unicode(this);
        _transition = "";
        return;
    }

    public synchronized void whitespace()
    {
        _transition = "whitespace";
        getState().whitespace(this);
        _transition = "";
        return;
    }

    public SmcLexerState valueOf(int stateId)
        throws ArrayIndexOutOfBoundsException
    {
        return (_States[stateId]);
    }

    public SmcLexerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((SmcLexerState) _state);
    }

    protected SmcLexer getOwner()
    {
        return (_owner);
    }

    public void setOwner(SmcLexer owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private SmcLexer _owner;
    transient private static SmcLexerState[] _States =
    {
        TokenMap.Start,
        TokenMap.CommentStart,
        TokenMap.PercentStart,
        TokenMap.PercentKeyword,
        TokenMap.Word,
        TokenMap.Scope,
        TokenMap.Colon,
        OldCommentMap.Start,
        OldCommentMap.CommentStart,
        OldCommentMap.CommentEnd,
        NewCommentMap.Start,
        SourceMap.Start,
        SourceMap.SourceEnd,
        SourceMap.NeverUsed
    };

    @SuppressWarnings("serial")
    public static abstract class SmcLexerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SmcLexerState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(SmcLexerContext context) {}
        protected void Exit(SmcLexerContext context) {}

        protected void EOL(SmcLexerContext context)
        {
            Default(context);
        }

        protected void alpha(SmcLexerContext context)
        {
            Default(context);
        }

        protected void asterisk(SmcLexerContext context)
        {
            Default(context);
        }

        protected void colon(SmcLexerContext context)
        {
            Default(context);
        }

        protected void comma(SmcLexerContext context)
        {
            Default(context);
        }

        protected void commentDone(SmcLexerContext context)
        {
            Default(context);
        }

        protected void digit(SmcLexerContext context)
        {
            Default(context);
        }

        protected void dollar(SmcLexerContext context)
        {
            Default(context);
        }

        protected void equal(SmcLexerContext context)
        {
            Default(context);
        }

        protected void gt(SmcLexerContext context)
        {
            Default(context);
        }

        protected void left_brace(SmcLexerContext context)
        {
            Default(context);
        }

        protected void left_bracket(SmcLexerContext context)
        {
            Default(context);
        }

        protected void left_paren(SmcLexerContext context)
        {
            Default(context);
        }

        protected void lt(SmcLexerContext context)
        {
            Default(context);
        }

        protected void percent(SmcLexerContext context)
        {
            Default(context);
        }

        protected void period(SmcLexerContext context)
        {
            Default(context);
        }

        protected void right_brace(SmcLexerContext context)
        {
            Default(context);
        }

        protected void right_paren(SmcLexerContext context)
        {
            Default(context);
        }

        protected void semicolon(SmcLexerContext context)
        {
            Default(context);
        }

        protected void slash(SmcLexerContext context)
        {
            Default(context);
        }

        protected void sourceDone(SmcLexerContext context)
        {
            Default(context);
        }

        protected void underscore(SmcLexerContext context)
        {
            Default(context);
        }

        protected void unicode(SmcLexerContext context)
        {
            Default(context);
        }

        protected void whitespace(SmcLexerContext context)
        {
            Default(context);
        }

        protected void Default(SmcLexerContext context)
        {
            if (log.isTraceEnabled())
            {
                log.trace(
                    "TRANSITION   : Default [" + context.getName() + "]");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    public static abstract class TokenMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final TokenMap_Start Start =
            new TokenMap_Start("TokenMap.Start", 0);
        public static final TokenMap_CommentStart CommentStart =
            new TokenMap_CommentStart("TokenMap.CommentStart", 1);
        public static final TokenMap_PercentStart PercentStart =
            new TokenMap_PercentStart("TokenMap.PercentStart", 2);
        public static final TokenMap_PercentKeyword PercentKeyword =
            new TokenMap_PercentKeyword("TokenMap.PercentKeyword", 3);
        public static final TokenMap_Word Word =
            new TokenMap_Word("TokenMap.Word", 4);
        public static final TokenMap_Scope Scope =
            new TokenMap_Scope("TokenMap.Scope", 5);
        public static final TokenMap_Colon Colon =
            new TokenMap_Colon("TokenMap.Colon", 6);
        @SuppressWarnings("unused")
        private static final TokenMap_Default Default =
            new TokenMap_Default("TokenMap.Default", -1);

    }

    @SuppressWarnings("serial")
    protected static class TokenMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected TokenMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.badToken("Unknown token");
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Default.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Default.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class TokenMap_Start
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void EOL(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : EOL() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : alpha() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                context.setState(TokenMap.Word);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : colon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                context.setState(TokenMap.Colon);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void comma(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : comma() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.COMMA);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void dollar(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : dollar() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.DOLLAR);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void equal(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : equal() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.EQUAL);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void left_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.LEFT_BRACE);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_bracket() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.LEFT_BRACKET);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void left_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.LEFT_PAREN);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : percent() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                context.setState(TokenMap.PercentStart);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.RIGHT_BRACE);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void right_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.RIGHT_PAREN);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void semicolon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : semicolon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.SEMICOLON);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.setState(TokenMap.CommentStart);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void underscore(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : underscore() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                context.setState(TokenMap.Word);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Start.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void unicode(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : unicode() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.outputChar();
                ctxt.badToken("Unknown character");
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : whitespace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Start [" + context.getName() + "]");
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class TokenMap_CommentStart
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_CommentStart(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.CommentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.CommentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.CommentStart.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.endToken(SmcLexer.SLASH);
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.CommentStart [" + context.getName() + "]");
            }
            context.pushState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void commentDone(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : commentDone() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.CommentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.CommentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.CommentStart.Exit(context) [" + context.getName() + "]");
                }

            context.setState(TokenMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.CommentStart [" + context.getName() + "]");
            }
            context.pushState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : TokenMap.TokenMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class TokenMap_PercentStart
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_PercentStart(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.badToken("Unknown % directive");
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : alpha() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(TokenMap.PercentKeyword);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void left_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentStart [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.startToken();
            }
            finally
            {
                context.setState(endState);
                context.pushState(SourceMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : percent() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.EOD);
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.badToken("End-of-source appears without matching start-of-source");
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void sourceDone(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : sourceDone() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentStart.Exit(context) [" + context.getName() + "]");
                }

            context.setState(TokenMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentStart.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class TokenMap_PercentKeyword
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_PercentKeyword(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentKeyword [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentKeyword.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentKeyword.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.badToken("Unknown % directive");
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentKeyword.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentKeyword.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void EOL(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : EOL() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentKeyword [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentKeyword.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentKeyword.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.checkPercentKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentKeyword.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentKeyword.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : alpha() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentKeyword [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void whitespace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : whitespace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.PercentKeyword [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.PercentKeyword.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.PercentKeyword.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.checkPercentKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.PercentKeyword.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.PercentKeyword.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class TokenMap_Word
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Word(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.badToken("Unknown token");
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void EOL(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : EOL() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : alpha() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void asterisk(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : colon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.setState(TokenMap.Scope);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void comma(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : comma() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void digit(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : digit() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void dollar(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : dollar() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void equal(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : equal() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void gt(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : gt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void left_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_bracket() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void left_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void lt(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : lt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void period(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : period() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void right_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void semicolon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : semicolon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void slash(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void underscore(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : underscore() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void whitespace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : whitespace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Word [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Word.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Word.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class TokenMap_Scope
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Scope(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Scope [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Scope.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Scope.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Scope.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Scope.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : colon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Scope [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Scope.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Scope.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken("::");
            }
            finally
            {
                context.setState(TokenMap.Word);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Scope.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Scope.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class TokenMap_Colon
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Colon(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Colon [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Colon.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Colon.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.addToToken(":");
                ctxt.endToken(SmcLexer.COLON);
            }
            finally
            {
                context.setState(TokenMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Colon.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Colon.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : colon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : TokenMap.Colon [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : TokenMap.TokenMap.Colon.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : TokenMap.TokenMap.Colon.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken("::");
            }
            finally
            {
                context.setState(TokenMap.Word);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : TokenMap.TokenMap.Colon.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : TokenMap.TokenMap.Colon.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    public static abstract class OldCommentMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final OldCommentMap_Start Start =
            new OldCommentMap_Start("OldCommentMap.Start", 0);
        public static final OldCommentMap_CommentStart CommentStart =
            new OldCommentMap_CommentStart("OldCommentMap.CommentStart", 1);
        public static final OldCommentMap_CommentEnd CommentEnd =
            new OldCommentMap_CommentEnd("OldCommentMap.CommentEnd", 2);
        @SuppressWarnings("unused")
        private static final OldCommentMap_Default Default =
            new OldCommentMap_Default("OldCommentMap.Default", -1);

    }

    @SuppressWarnings("serial")
    protected static class OldCommentMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected OldCommentMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void alpha(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : alpha() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void digit(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : digit() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void percent(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : percent() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void left_brace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void right_brace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_bracket() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void left_paren(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void right_paren(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void period(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : period() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void lt(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : lt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void gt(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : gt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : colon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void comma(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : comma() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void semicolon(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : semicolon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void underscore(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : underscore() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void equal(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : equal() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void dollar(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : dollar() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : whitespace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void EOL(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : EOL() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void unicode(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : unicode() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class OldCommentMap_Start
        extends OldCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OldCommentMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.CommentEnd);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Start.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Start.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.CommentStart);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.Start.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.Start.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class OldCommentMap_CommentStart
        extends OldCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OldCommentMap_CommentStart(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.CommentStart [" + context.getName() + "]");
            }
            context.pushState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void commentDone(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : commentDone() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.CommentStart [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.CommentStart.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.CommentStart.Exit(context) [" + context.getName() + "]");
                }

            context.setState(OldCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.CommentStart [" + context.getName() + "]");
            }
            context.pushState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : OldCommentMap.OldCommentMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : OldCommentMap.OldCommentMap.CommentStart.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class OldCommentMap_CommentEnd
        extends OldCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OldCommentMap_CommentEnd(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.CommentEnd [" + context.getName() + "]");
            }
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : OldCommentMap.CommentEnd [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : OldCommentMap.OldCommentMap.CommentEnd.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : OldCommentMap.OldCommentMap.CommentEnd.Exit(context) [" + context.getName() + "]");
                }

            context.popState();

            context.commentDone();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    public static abstract class NewCommentMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final NewCommentMap_Start Start =
            new NewCommentMap_Start("NewCommentMap.Start", 0);
        @SuppressWarnings("unused")
        private static final NewCommentMap_Default Default =
            new NewCommentMap_Default("NewCommentMap.Default", -1);

    }

    @SuppressWarnings("serial")
    protected static class NewCommentMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected NewCommentMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void alpha(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : alpha() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void digit(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : digit() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void percent(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : percent() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void left_brace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void right_brace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_bracket() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void left_paren(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void right_paren(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void period(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : period() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void lt(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : lt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void gt(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : gt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : colon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void comma(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : comma() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void semicolon(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : semicolon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void underscore(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : underscore() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void equal(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : equal() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void dollar(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : dollar() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : whitespace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

        protected void unicode(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : unicode() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Default [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Default.Exit(context) [" + context.getName() + "]");
                }

            context.setState(NewCommentMap.Start);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : NewCommentMap.NewCommentMap.Default.Entry(context) [" + context.getName() + "]");
            }
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class NewCommentMap_Start
        extends NewCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private NewCommentMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void EOL(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : EOL() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : NewCommentMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : NewCommentMap.NewCommentMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : NewCommentMap.NewCommentMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.popState();

            context.commentDone();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    public static abstract class SourceMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final SourceMap_Start Start =
            new SourceMap_Start("SourceMap.Start", 0);
        public static final SourceMap_SourceEnd SourceEnd =
            new SourceMap_SourceEnd("SourceMap.SourceEnd", 1);
        public static final SourceMap_NeverUsed NeverUsed =
            new SourceMap_NeverUsed("SourceMap.NeverUsed", 2);
        @SuppressWarnings("unused")
        private static final SourceMap_Default Default =
            new SourceMap_Default("SourceMap.Default", -1);

    }

    @SuppressWarnings("serial")
    protected static class SourceMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SourceMap_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class SourceMap_Start
        extends SourceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SourceMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : SourceMap.SourceMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : SourceMap.SourceMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                context.setState(SourceMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : SourceMap.SourceMap.Start.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : SourceMap.SourceMap.Start.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : percent() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.Start [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : SourceMap.SourceMap.Start.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : SourceMap.SourceMap.Start.Exit(context) [" + context.getName() + "]");
                }

            context.setState(SourceMap.SourceEnd);

            if (log.isTraceEnabled())
            {
                log.trace("BEFORE ENTRY    : SourceMap.SourceMap.Start.Entry(context) [" + context.getName() + "]");
            }

            (context.getState()).Entry(context);

            if (log.isTraceEnabled())
            {
                log.trace("AFTER ENTRY     : SourceMap.SourceMap.Start.Entry(context) [" + context.getName() + "]");
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class SourceMap_SourceEnd
        extends SourceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SourceMap_SourceEnd(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : Default() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.SourceEnd [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : SourceMap.SourceMap.SourceEnd.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : SourceMap.SourceMap.SourceEnd.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.addToToken("%");
                ctxt.addToToken();
            }
            finally
            {
                context.setState(SourceMap.Start);

                if (log.isTraceEnabled())
                {
                    log.trace("BEFORE ENTRY    : SourceMap.SourceMap.SourceEnd.Entry(context) [" + context.getName() + "]");
                }

                (context.getState()).Entry(context);

                if (log.isTraceEnabled())
                {
                    log.trace("AFTER ENTRY     : SourceMap.SourceMap.SourceEnd.Entry(context) [" + context.getName() + "]");
                }
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : percent() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.SourceEnd [" + context.getName() + "]");
            }
            SmcLexerState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.addToToken("%");
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.SourceEnd [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
        {
                log.trace("BEFORE EXIT     : SourceMap.SourceMap.SourceEnd.Exit(context) [" + context.getName() + "]");
            }

            (context.getState()).Exit(context);
            if (log.isTraceEnabled())
        {
                log.trace("AFTER EXIT      : SourceMap.SourceMap.SourceEnd.Exit(context) [" + context.getName() + "]");
                }

            context.clearState();
            try
            {
                ctxt.endToken(SmcLexer.SOURCE);
            }
            finally
            {
                context.popState();
            }


            context.sourceDone();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class SourceMap_NeverUsed
        extends SourceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SourceMap_NeverUsed(String name, int id)
        {
            super (name, id);
        }

        protected void EOL(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : EOL() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void alpha(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : alpha() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : asterisk() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : colon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void comma(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : comma() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void digit(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : digit() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void dollar(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : dollar() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void equal(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : equal() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void gt(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : gt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void left_brace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_bracket() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void left_paren(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : left_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void lt(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : lt() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void period(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : period() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void right_brace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_brace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void right_paren(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : right_paren() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void semicolon(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : semicolon() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : slash() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void underscore(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : underscore() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void unicode(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : unicode() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (log.isTraceEnabled())
            {
                log.trace("TRANSITION   : whitespace() [" + context.getName() + "]");
            }
            if (log.isTraceEnabled())
            {
                log.trace("LEAVING STATE   : SourceMap.NeverUsed [" + context.getName() + "]");
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
    private void writeObject(java.io.ObjectOutputStream ostream)
        throws java.io.IOException
    {
        int size =
            (_stateStack == null ? 0 : _stateStack.size());
        int i;

        ostream.writeInt(size);

        for (i = 0; i < size; ++i)
        {
            ostream.writeInt(
                ((SmcLexerState) _stateStack.get(i)).getId());
        }

        ostream.writeInt(_state.getId());

        return;
    }

    private void readObject(java.io.ObjectInputStream istream)
        throws java.io.IOException
    {
        int size;

        size = istream.readInt();

        if (size == 0)
        {
            _stateStack = null;
        }
        else
        {
            int i;

            _stateStack =
                new java.util.Stack<statemap.State>();

            for (i = 0; i < size; ++i)
            {
                _stateStack.add(i, _States[istream.readInt()]);
            }
        }

        _state = _States[istream.readInt()];

        return;
    }


	transient protected java.util.Stack<statemap.State> _stateStack;

    /**
     * Pushes the current state on top of the state stack and
     * sets the current state to {@code state}.
     * @param state The new current state.
     * @exception NullPointerException
     * if {@code state} is {@code null}.
     */
    public void pushState(statemap.State state)
    {
        if (_state == null)
        {
            throw (new NullPointerException());
        }

        if (getLog().isDebugEnabled())
        {
            getLog().debug(String.format("PUSH TO STATE   : %s [%s]",
                                     state.getName(), _name));
        }

        if (_stateStack == null)
        {
            _stateStack = new java.util.Stack<statemap.State>();
        }

        _stateStack.push(_state);
        _state = state;

        return;
    } // end of pushState(State)

    /**
     * Sets the previous state to the current state and pops
     * the top state off the stack and places it into the
     * current state.
     * if the state stack is empty.
     */
    public void popState()
    {
        if (_stateStack == null ||
            _stateStack.isEmpty() == true)
        {
            if (getLog().isDebugEnabled())
            {
                getLog().debug(
                    "POPPING ON EMPTY STATE STACK.");
            }

            throw (new RuntimeException("Empty Stack"));
        }
        else
        {
            // The pop method removes the top element
            // from the stack and returns it.
            _state = _stateStack.pop();

            if (_stateStack.isEmpty() == true)
            {
                _stateStack = null;
            }

            if (getLog().isDebugEnabled())
            {
                getLog().debug(String.format("POP TO STATE    : %s [%s]",
                                      _state.getName(), _name));
            }
        }

        return;
    } // end of popState()

    /**
     * Empties the state stack.
     */
    public void emptyStateStack()
    {
        if (_stateStack != null)
        {
            _stateStack.clear();
            _stateStack = null;
        }

        return;
    } // end of emptyStateStack()
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
